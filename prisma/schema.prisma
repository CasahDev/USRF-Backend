generator client {
  provider = "dart run orm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  first_name String
  last_name  String
  password   String
  salt       String
  history    history[]
}

model team {
  id      Int     @id @default(autoincrement())
  name    String
  fffId   Int
  matches match[] @relation("matchteam")
}

enum Position {
  Goalkeeper
  CenterBack
  LeftBack
  RightBack
  DefensiveMidfielder
  CentralMidfielder
  AttackingMidfielder
  LeftWinger
  RightWinger
  Striker
  Substitute
}

model player {
  id         Int        @id @default(autoincrement())
  first_name String
  last_name  String
  played     played[]
  can_play   can_play[] @relation("can_play")
}

model match {
  id            Int            @id @default(autoincrement())
  team          team?          @relation("matchteam", fields: [teamId], references: [id])
  teamId        Int?
  opponent      Opponent       @relation("matchOpponent", fields: [opponentId], references: [id])
  opponentId    Int
  teamScore     Int
  opponentScore Int
  address       String
  date          DateTime
  isHome        Boolean
  coach         String
  played        played[]
  state         GameState
  startedTime   DateTime
  isCup         Boolean
  matchHistory  matchHistory[] @relation("matchHistory")
}

enum GameState {
  notStarted
  firstHalf
  halfTime
  secondHalf
  end
}

model played {
  id           Int      @id @default(autoincrement())
  match        match    @relation(fields: [matchId], references: [id])
  matchId      Int
  player       player   @relation(fields: [playerId], references: [id])
  playerId     Int
  jerseyNumber Int
  entryTime    DateTime
  leaveTime    DateTime
  goals        Int
  blocked      Int
  onTarget     Int
  offTarget    Int
  assists      Int
  yellow       Boolean
  red          Boolean
}

model can_play {
  id       Int      @id @default(autoincrement())
  player   player   @relation("can_play", fields: [playerId], references: [id])
  playerId Int
  position Position
}

enum action_type {
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  CREATE_TEAM
  UPDATE_TEAM
  DELETE_TEAM
  CREATE_PLAYER
  UPDATE_PLAYER
  DELETE_PLAYER
  CREATE_MATCH
  UPDATE_MATCH
  DELETE_MATCH
  CREATE_PLAYED
  UPDATE_PLAYED
  DELETE_PLAYED
}

model history {
  id                       Int         @id @default(autoincrement())
  author                   user        @relation(fields: [authorId], references: [id])
  authorId                 Int
  created_at               DateTime    @default(now())
  action_type              action_type
  additionnal_informations String
}

model Opponent {
  id      Int     @id @default(autoincrement())
  name    String
  fffId   Int
  matches match[] @relation("matchOpponent")
}

model matchHistory {
  id                       Int        @id @default(autoincrement())
  match                    match      @relation("matchHistory", fields: [matchId], references: [id])
  matchId                  Int
  eventType                MatchEvent
  time                     DateTime
  additionnal_informations String
}

enum MatchEvent {
  CREATE_CAN_PLAY
  UPDATE_CAN_PLAY
  DELETE_CAN_PLAY
  ADD_GOAL
  REMOVE_GOAL
  ADD_ASSIST
  REMOVE_ASSIST
  ADD_YELLOW_CARD
  REMOVE_YELLOW_CARD
  ADD_RED_CARD
  REMOVE_RED_CARD
  ADD_BLOCKED_SHOT
  REMOVE_BLOCKED_SHOT
  ADD_ON_TARGET_SHOT
  REMOVE_ON_TARGET_SHOT
  ADD_OFF_TARGET_SHOT
  REMOVE_OFF_TARGET_SHOT
  SWITCH_PLAYER
}
